// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String              @id @default(cuid())
  email                 String              @unique
  username              String              @unique
  password              String
  personalityType       String?             // MBTI, Big Five traits
  motivationStyle       MotivationStyle     @default(MIXED)
  procrastinationTriggers String[]          // Array of trigger patterns
  energyPatterns        Json?               // Time-based energy levels
  preferredRewards      RewardType[]        @default([])
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  tasks                 Task[]
  lifeGoals             LifeGoal[]
  habits                Habit[]
  behaviorData          BehaviorData[]
  aiInsights            AIInsight[]

  @@map("users")
}

model Task {
  id                String    @id @default(cuid())
  title             String
  description       String?
  completed         Boolean   @default(false)
  priority          Priority  @default(MEDIUM)
  dueDate           DateTime?
  estimatedDuration Int?      // Duration in minutes
  startedAt         DateTime?
  completedAt       DateTime?
  deadline          DateTime? // Hard deadline for completion
  reminderEnabled   Boolean   @default(true)
  lastReminderAt    DateTime?
  progressPercent   Int       @default(0) // 0-100
  procrastinationRisk Float   @default(0.0) // 0.0-1.0
  energyRequired    EnergyLevel @default(MEDIUM)
  difficultyLevel   Int       @default(5) // 1-10
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            String
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId        String?
  category          Category? @relation(fields: [categoryId], references: [id])
  lifeGoalId        String?
  lifeGoal          LifeGoal? @relation(fields: [lifeGoalId], references: [id])
  habitId           String?
  habit             Habit?    @relation(fields: [habitId], references: [id])

  @@map("tasks")
}

model Category {
  id    String @id @default(cuid())
  name  String
  color String @default("#3B82F6")
  tasks Task[]

  @@map("categories")
}

// Life Goals and Anti-Procrastination Models
model LifeGoal {
  id              String        @id @default(cuid())
  title           String
  description     String?
  category        GoalCategory
  timeframe       TimeFrame
  importance      Int           // 1-10
  difficulty      Int           // 1-10
  status          GoalStatus    @default(ACTIVE)
  targetDate      DateTime?
  completedAt     DateTime?
  progressPercent Int           @default(0) // 0-100
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  milestones      Milestone[]
  tasks           Task[]
  aiInsights      AIInsight[]

  @@map("life_goals")
}

model Milestone {
  id              String    @id @default(cuid())
  title           String
  description     String?
  targetDate      DateTime?
  completedAt     DateTime?
  progressPercent Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lifeGoalId      String
  lifeGoal        LifeGoal  @relation(fields: [lifeGoalId], references: [id], onDelete: Cascade)

  @@map("milestones")
}

model Habit {
  id              String      @id @default(cuid())
  title           String
  description     String?
  frequency       Frequency   // DAILY, WEEKLY, etc.
  targetCount     Int         @default(1) // How many times per frequency period
  currentStreak   Int         @default(0)
  longestStreak   Int         @default(0)
  difficulty      Int         @default(5) // 1-10
  energyRequired  EnergyLevel @default(MEDIUM)
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks           Task[]
  habitLogs       HabitLog[]

  @@map("habits")
}

model HabitLog {
  id          String   @id @default(cuid())
  completed   Boolean  @default(true)
  notes       String?
  mood        Int?     // 1-10 mood after completing
  energy      Int?     // 1-10 energy level
  loggedAt    DateTime @default(now())
  habitId     String
  habit       Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@map("habit_logs")
}

model BehaviorData {
  id                  String          @id @default(cuid())
  action              UserAction
  context             Json?           // Contextual information
  emotionalState      EmotionalState?
  procrastinationRisk Float           @default(0.0)
  interventionTaken   String[]        // Array of interventions
  timestamp           DateTime        @default(now())
  userId              String
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("behavior_data")
}

model AIInsight {
  id          String      @id @default(cuid())
  type        InsightType
  title       String
  content     String
  confidence  Float       // 0.0-1.0
  actionable  Boolean     @default(true)
  dismissed   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  lifeGoalId  String?
  lifeGoal    LifeGoal?   @relation(fields: [lifeGoalId], references: [id])

  @@map("ai_insights")
}

// Enums
enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MotivationStyle {
  INTRINSIC
  EXTRINSIC
  MIXED
}

enum RewardType {
  SOCIAL_RECOGNITION
  PERSONAL_TREAT
  BREAK_TIME
  ENTERTAINMENT
  ACHIEVEMENT_BADGE
  PROGRESS_VISUALIZATION
}

enum GoalCategory {
  HEALTH_FITNESS
  CAREER_PROFESSIONAL
  EDUCATION_LEARNING
  RELATIONSHIPS_SOCIAL
  FINANCIAL
  PERSONAL_DEVELOPMENT
  HOBBIES_INTERESTS
  TRAVEL_ADVENTURE
  FAMILY
  SPIRITUAL_MINDFULNESS
}

enum TimeFrame {
  SHORT_TERM    // 1-3 months
  MEDIUM_TERM   // 3-12 months
  LONG_TERM     // 1-3 years
  LIFE_LONG     // 3+ years
}

enum GoalStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum EnergyLevel {
  VERY_LOW
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

enum UserAction {
  TASK_CREATED
  TASK_STARTED
  TASK_COMPLETED
  TASK_POSTPONED
  GOAL_CREATED
  GOAL_UPDATED
  HABIT_LOGGED
  PROCRASTINATION_DETECTED
  INTERVENTION_DISMISSED
  AI_ADVICE_REQUESTED
}

enum EmotionalState {
  MOTIVATED
  ANXIOUS
  OVERWHELMED
  FOCUSED
  DISTRACTED
  CONFIDENT
  DOUBTFUL
  ENERGETIC
  TIRED
}

enum InsightType {
  PROCRASTINATION_WARNING
  MOTIVATION_BOOST
  GOAL_ADJUSTMENT
  HABIT_SUGGESTION
  PROGRESS_CELEBRATION
  PATTERN_RECOGNITION
  ENERGY_OPTIMIZATION
}
